#!/usr/bin/env ruby

LINUX_PACKAGES = {
  :common => %w( ruby-dev rdoc irb libopenssl-ruby wget make curl aspell-es aspell-en libxml2-dev libxslt-dev libmagickcore-dev libmagickwand-dev ),
  :production => %w( awstats logrotate nfs-common ),
  :development => %w( ),
  :mysql  => %w( libmysqlclient15-dev mysql-server ),
  :sqlite => %w( libsqlite3-dev )
}

RUBY_GEMS_VERSION = "1.3.7"
RUBY_GEMS_PACKAGE = "rubygems-#{ RUBY_GEMS_VERSION }.tgz"
RUBY_GEMS_DOWNLOAD = "http://rubyforge.org/frs/download.php/70696/#{ RUBY_GEMS_PACKAGE }"

GEMS = {
  #TODO: get rails version from config/environment.rb
  :common     => [ "rails -v 2.3.4",
                   "rmagick -v 2.13.1",
                   "rake -v 0.8.7",
                   "vpim -v 0.695",
                   "ruby-debug -v 0.10.3",
                   "ruby-openid -v 2.1.7",
                   "atom-tools -v 2.0.4",
                   "mislav-will_paginate -s http://gems.github.com/ -v 2.3.11",
                   "rcov -v 0.9.8",
                   "chronic -v 0.2.3",
                   "hpricot -v 0.8.2",
                   "feed-normalizer -v 1.5.2",
                   "rspec-rails -v 1.3.3",
                   "hoe -v 2.6.1",
                   "httparty -v 0.5.2",
                   "pdf-writer -v 1.1.8",
                   "ci_reporter -v 1.6.2",
                   "nokogiri -v 1.4.1",
                   "prism -v 0.1.0",
                   "rubyzip -v 0.9.4",
                   "columnize -v 0.3.1",
                   "garb -v 0.8.4" ],
  :production  => [ ],
  :development => [ "capistrano",
                    "mongrel",
                    "populator -v 1.0.0",
                    "faker -v 0.3.1",
                    "thoughtbot-factory_girl -s http://gems.github.com/"
                     ],
  :mysql => [ "mysql" ],
  :sqlite => [ "sqlite3-ruby" ]
}

DATABASES = %w( MySQL SQLite )

def install_linux_packages(set)
  return unless `uname`.chomp == "Linux" && `which aptitude` != ""

  puts "* Install #{ set } Linux packages"
  if LINUX_PACKAGES[set].any?
    system "sudo aptitude install #{ LINUX_PACKAGES[set].join(" ") }"
  end
end

def install_gems(set)
  puts "Installing #{ set } gems.."
  GEMS[set].each do |gem|
    puts "Installing gem: #{ gem }"
    system "gem install #{ gem } --no-ri --no-rdoc"
  end
end

def install_gem_subsystem
      puts "Installing Ruby Gems"
      system "cd /tmp && wget #{ RUBY_GEMS_DOWNLOAD }"
      system "cd /tmp && tar zxf #{ RUBY_GEMS_PACKAGE }"
      system "cd /tmp/rubygems-#{ RUBY_GEMS_VERSION } && sudo /usr/bin/ruby setup.rb"
end

def install_database
  print "* Checking config/database.yml: "

  db_file = File.dirname(__FILE__) + "/../config/database.yml"

  if File.exist?(db_file)
    puts "file exists. Assuming configurated database."
    return
  end

  db_type = ask_for_db_type
  install_linux_packages(db_type)
  install_gems(db_type)

  `cp #{ db_file }.#{ db_type }.example #{ db_file }` 

  if db_type == :mysql
    puts
    puts "***************************************************************"
    puts
    puts "MySQL support installed."
    puts "Please, configure your MySQL database and run the script again."
    exit(-1)
  end
end

def ask_for_db_type
  puts
  puts "Which database do you want to install?"
  DATABASES.each_with_index do |db, index|
    puts "#{ index + 1 }. #{ db }"
  end

  until ( number = STDIN.gets.chomp ) =~ /[12]/
    puts "Please, choose 1 or 2"
  end 

  DATABASES[ number.to_i - 1].downcase.to_sym
end

def setup_environment(env)
  puts "\n [1] Instalacion de paquetes comunes \n"
  install_linux_packages(:common)

  puts "\n [2] Instalacion de paquetes para #{ env } \n"
  install_linux_packages(env)

  puts "\n [3] Instalacion de gemas \n"
  install_gem_subsystem

  puts "\n [4] Instalacion de gemas comunes \n"
  install_gems(:common)

  puts "\n [5] Instalacion de gemas para #{ env } \n"
  install_gems(env)

  puts "\n [6] Instalacion base de datos \n"
  install_database

  puts "\n [7] Poblando base de datos \n"
  system "rake setup:#{ env }"

  puts "Completado"
end

def print_banner(env)
  puts
  puts "------------------------------"
  puts "Setting #{ env } environment"
  puts "------------------------------"
  puts
end

if ARGV[0] =~ /production/
  print_banner("PRODUCTION")
  setup_environment(:production)
else
  print_banner("DEVELOPMENT")
  setup_environment(:development)
end
